---
import Button from "./ui/button.astro";
---

<form id="form" novalidate>
  <div class="mb-5">
    <input
      type="text"
      placeholder="Full Name"
      minlength={5}
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
      name="name"
    />
    <div class="empty-feedback text-red-400 text-sm mt-1">Please provide your full name.</div>
    <div class="invalid-feedback text-red-400 text-sm mt-1">
      Name should be at least 5 characters, and alphanumeric or underscore
    </div>
  </div>
  <div class="mb-5">
    <input
      type="email"
      placeholder="Email"
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
      name="email"
    />
    <div class="empty-feedback text-red-400 text-sm mt-1">Please provide your email address.</div>
    <div class="invalid-feedback text-red-400 text-sm mt-1">
      Please provide a valid email address.
    </div>
  </div>
  <div class="mb-5">
    <input
      type="password"
      placeholder="Password"
      minlength={8}
      maxlength={64}
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
      name="password"
    />
    <div class="empty-feedback text-red-400 text-sm mt-1">Please provide your password.</div>
    <div class="invalid-feedback text-red-400 text-sm mt-1">
      Password should be at least 8 characters.
    </div>
  </div>
  <Button type="submit" size="lg" id="submit-btn" block>Sign Up</Button>
  <div id="result" class="mt-3 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script>
  const form = document.getElementById("form") as HTMLFormElement;
  const result = document.getElementById("result") as HTMLDivElement;
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    form.classList.add("was-validated");
    if (!form.checkValidity()) {
      (form.querySelectorAll(":invalid")[0] as HTMLElement).focus();
      return;
    }

    submitBtn.disabled = true;

    const formData = new FormData(form);
    const object = Object.fromEntries(formData);
    const reqUrl = import.meta.env.PUBLIC_SERVER_URL;
    fetch(reqUrl + "/api/auth/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(object),
      mode: "cors",
      credentials: "include",
    })
      .then(async (res) => {
        const json = await res.json();
        if (json.error || res.status != 201) {
          result.classList.remove("text-green-500");
          result.classList.add("text-red-500");
          result.innerHTML = json.cause;
          return;
        }

        result.classList.remove("text-red-500");
        result.classList.add("text-green-500");
        result.innerHTML = "Sign up successful!";
        setTimeout(() => {
          location.href = "/account";
        }, 1000);
      })
      .catch((error) => {
        console.log(error);
        result.innerHTML = "Something went wrong!";
      })
      .finally(() => {
        submitBtn.disabled = false;
      });
  });
</script>
